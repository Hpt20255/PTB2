{"ast":null,"code":"import axios from 'axios';\n// Get API URL from environment variables\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // 10 seconds timeout\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`üöÄ API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`, config.data);\n  return config;\n}, error => {\n  console.error('‚ùå API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for logging and error handling\napi.interceptors.response.use(response => {\n  console.log(`‚úÖ API Response: ${response.status}`, response.data);\n  return response;\n}, error => {\n  var _error$response;\n  console.error('‚ùå API Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// API service functions\nexport const equationApi = {\n  // Create new equation\n  create: async coefficients => {\n    try {\n      const response = await api.post('/api/equation', coefficients);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && _error$response2.data) {\n        return error.response.data;\n      }\n      throw new Error(`Network error: ${error.message}`);\n    }\n  },\n  // Get all equations\n  getAll: async () => {\n    try {\n      const response = await api.get('/api/equation');\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      if ((_error$response3 = error.response) !== null && _error$response3 !== void 0 && _error$response3.data) {\n        return error.response.data;\n      }\n      throw new Error(`Network error: ${error.message}`);\n    }\n  },\n  // Get equation by ID\n  getById: async id => {\n    try {\n      const response = await api.get(`/api/equation/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      if ((_error$response4 = error.response) !== null && _error$response4 !== void 0 && _error$response4.data) {\n        return error.response.data;\n      }\n      throw new Error(`Network error: ${error.message}`);\n    }\n  },\n  // Update equation\n  update: async (id, coefficients) => {\n    try {\n      const response = await api.put(`/api/equation/${id}`, coefficients);\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      if ((_error$response5 = error.response) !== null && _error$response5 !== void 0 && _error$response5.data) {\n        return error.response.data;\n      }\n      throw new Error(`Network error: ${error.message}`);\n    }\n  },\n  // Delete equation\n  delete: async id => {\n    try {\n      const response = await api.delete(`/api/equation/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      if ((_error$response6 = error.response) !== null && _error$response6 !== void 0 && _error$response6.data) {\n        return error.response.data;\n      }\n      throw new Error(`Network error: ${error.message}`);\n    }\n  },\n  // Test API connection\n  ping: async () => {\n    try {\n      const response = await api.get('/ping');\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      if ((_error$response7 = error.response) !== null && _error$response7 !== void 0 && _error$response7.data) {\n        return error.response.data;\n      }\n      throw new Error(`Network error: ${error.message}`);\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","timeout","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","data","error","Promise","reject","response","status","_error$response","message","equationApi","coefficients","post","_error$response2","Error","getAll","get","_error$response3","getById","id","_error$response4","update","put","_error$response5","delete","_error$response6","ping","_error$response7"],"sources":["/workspace/TetsPTB2/GPTB2/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { EquationData, ApiResponse } from '../types';\n\n// Get API URL from environment variables\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  timeout: 10000, // 10 seconds timeout\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(\n  (config) => {\n    console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`, config.data);\n    return config;\n  },\n  (error) => {\n    console.error('‚ùå API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for logging and error handling\napi.interceptors.response.use(\n  (response) => {\n    console.log(`‚úÖ API Response: ${response.status}`, response.data);\n    return response;\n  },\n  (error) => {\n    console.error('‚ùå API Response Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n// API service functions\nexport const equationApi = {\n  // Create new equation\n  create: async (coefficients: { a: number; b: number; c: number }): Promise<ApiResponse<EquationData>> => {\n    try {\n      const response = await api.post('/api/equation', coefficients);\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.data) {\n        return error.response.data;\n      }\n      throw new Error(`Network error: ${error.message}`);\n    }\n  },\n\n  // Get all equations\n  getAll: async (): Promise<ApiResponse<EquationData[]>> => {\n    try {\n      const response = await api.get('/api/equation');\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.data) {\n        return error.response.data;\n      }\n      throw new Error(`Network error: ${error.message}`);\n    }\n  },\n\n  // Get equation by ID\n  getById: async (id: number): Promise<ApiResponse<EquationData>> => {\n    try {\n      const response = await api.get(`/api/equation/${id}`);\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.data) {\n        return error.response.data;\n      }\n      throw new Error(`Network error: ${error.message}`);\n    }\n  },\n\n  // Update equation\n  update: async (id: number, coefficients: { a: number; b: number; c: number }): Promise<ApiResponse<EquationData>> => {\n    try {\n      const response = await api.put(`/api/equation/${id}`, coefficients);\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.data) {\n        return error.response.data;\n      }\n      throw new Error(`Network error: ${error.message}`);\n    }\n  },\n\n  // Delete equation\n  delete: async (id: number): Promise<ApiResponse<EquationData>> => {\n    try {\n      const response = await api.delete(`/api/equation/${id}`);\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.data) {\n        return error.response.data;\n      }\n      throw new Error(`Network error: ${error.message}`);\n    }\n  },\n\n  // Test API connection\n  ping: async (): Promise<any> => {\n    try {\n      const response = await api.get('/ping');\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.data) {\n        return error.response.data;\n      }\n      throw new Error(`Network error: ${error.message}`);\n    }\n  }\n};\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;;AAE7E;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB,CAAC;EACDC,OAAO,EAAE,KAAK,CAAE;AAClB,CAAC,CAAC;;AAEF;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EAAA,IAAAC,cAAA;EACVC,OAAO,CAACC,GAAG,CAAC,oBAAAF,cAAA,GAAmBD,MAAM,CAACI,MAAM,cAAAH,cAAA,uBAAbA,cAAA,CAAeI,WAAW,CAAC,CAAC,IAAIL,MAAM,CAACM,GAAG,EAAE,EAAEN,MAAM,CAACO,IAAI,CAAC;EACzF,OAAOP,MAAM;AACf,CAAC,EACAQ,KAAK,IAAK;EACTN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC5C,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAhB,GAAG,CAACK,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC1BY,QAAQ,IAAK;EACZT,OAAO,CAACC,GAAG,CAAC,mBAAmBQ,QAAQ,CAACC,MAAM,EAAE,EAAED,QAAQ,CAACJ,IAAI,CAAC;EAChE,OAAOI,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EAAA,IAAAK,eAAA;EACTX,OAAO,CAACM,KAAK,CAAC,uBAAuB,EAAE,EAAAK,eAAA,GAAAL,KAAK,CAACG,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBN,IAAI,KAAIC,KAAK,CAACM,OAAO,CAAC;EAC7E,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMO,WAAW,GAAG;EACzB;EACAtB,MAAM,EAAE,MAAOuB,YAAiD,IAAyC;IACvG,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMnB,GAAG,CAACyB,IAAI,CAAC,eAAe,EAAED,YAAY,CAAC;MAC9D,OAAOL,QAAQ,CAACJ,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAU,gBAAA;MACnB,KAAAA,gBAAA,GAAIV,KAAK,CAACG,QAAQ,cAAAO,gBAAA,eAAdA,gBAAA,CAAgBX,IAAI,EAAE;QACxB,OAAOC,KAAK,CAACG,QAAQ,CAACJ,IAAI;MAC5B;MACA,MAAM,IAAIY,KAAK,CAAC,kBAAkBX,KAAK,CAACM,OAAO,EAAE,CAAC;IACpD;EACF,CAAC;EAED;EACAM,MAAM,EAAE,MAAAA,CAAA,KAAkD;IACxD,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMnB,GAAG,CAAC6B,GAAG,CAAC,eAAe,CAAC;MAC/C,OAAOV,QAAQ,CAACJ,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAc,gBAAA;MACnB,KAAAA,gBAAA,GAAId,KAAK,CAACG,QAAQ,cAAAW,gBAAA,eAAdA,gBAAA,CAAgBf,IAAI,EAAE;QACxB,OAAOC,KAAK,CAACG,QAAQ,CAACJ,IAAI;MAC5B;MACA,MAAM,IAAIY,KAAK,CAAC,kBAAkBX,KAAK,CAACM,OAAO,EAAE,CAAC;IACpD;EACF,CAAC;EAED;EACAS,OAAO,EAAE,MAAOC,EAAU,IAAyC;IACjE,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMnB,GAAG,CAAC6B,GAAG,CAAC,iBAAiBG,EAAE,EAAE,CAAC;MACrD,OAAOb,QAAQ,CAACJ,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAiB,gBAAA;MACnB,KAAAA,gBAAA,GAAIjB,KAAK,CAACG,QAAQ,cAAAc,gBAAA,eAAdA,gBAAA,CAAgBlB,IAAI,EAAE;QACxB,OAAOC,KAAK,CAACG,QAAQ,CAACJ,IAAI;MAC5B;MACA,MAAM,IAAIY,KAAK,CAAC,kBAAkBX,KAAK,CAACM,OAAO,EAAE,CAAC;IACpD;EACF,CAAC;EAED;EACAY,MAAM,EAAE,MAAAA,CAAOF,EAAU,EAAER,YAAiD,KAAyC;IACnH,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMnB,GAAG,CAACmC,GAAG,CAAC,iBAAiBH,EAAE,EAAE,EAAER,YAAY,CAAC;MACnE,OAAOL,QAAQ,CAACJ,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAoB,gBAAA;MACnB,KAAAA,gBAAA,GAAIpB,KAAK,CAACG,QAAQ,cAAAiB,gBAAA,eAAdA,gBAAA,CAAgBrB,IAAI,EAAE;QACxB,OAAOC,KAAK,CAACG,QAAQ,CAACJ,IAAI;MAC5B;MACA,MAAM,IAAIY,KAAK,CAAC,kBAAkBX,KAAK,CAACM,OAAO,EAAE,CAAC;IACpD;EACF,CAAC;EAED;EACAe,MAAM,EAAE,MAAOL,EAAU,IAAyC;IAChE,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMnB,GAAG,CAACqC,MAAM,CAAC,iBAAiBL,EAAE,EAAE,CAAC;MACxD,OAAOb,QAAQ,CAACJ,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAsB,gBAAA;MACnB,KAAAA,gBAAA,GAAItB,KAAK,CAACG,QAAQ,cAAAmB,gBAAA,eAAdA,gBAAA,CAAgBvB,IAAI,EAAE;QACxB,OAAOC,KAAK,CAACG,QAAQ,CAACJ,IAAI;MAC5B;MACA,MAAM,IAAIY,KAAK,CAAC,kBAAkBX,KAAK,CAACM,OAAO,EAAE,CAAC;IACpD;EACF,CAAC;EAED;EACAiB,IAAI,EAAE,MAAAA,CAAA,KAA0B;IAC9B,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAMnB,GAAG,CAAC6B,GAAG,CAAC,OAAO,CAAC;MACvC,OAAOV,QAAQ,CAACJ,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAwB,gBAAA;MACnB,KAAAA,gBAAA,GAAIxB,KAAK,CAACG,QAAQ,cAAAqB,gBAAA,eAAdA,gBAAA,CAAgBzB,IAAI,EAAE;QACxB,OAAOC,KAAK,CAACG,QAAQ,CAACJ,IAAI;MAC5B;MACA,MAAM,IAAIY,KAAK,CAAC,kBAAkBX,KAAK,CAACM,OAAO,EAAE,CAAC;IACpD;EACF;AACF,CAAC;AAED,eAAetB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}